{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI-project-WW2\\\\src\\\\pages\\\\ThirdPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from \"react\";\nimport { AppContext } from \"../Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThirdPage = () => {\n  _s();\n  const {\n    userInput,\n    aiResponse,\n    setAiResponse\n  } = useContext(AppContext);\n  useEffect(() => {\n    const fetchAiResponse = async () => {\n      try {\n        const response = await fetch(\"https://your-backend-api.com/ai-response\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            input: userInput\n          })\n        });\n        const data = await response.json();\n        setAiResponse(data.response || \"Ошибка от ИИ\");\n      } catch (error) {\n        setAiResponse(\"Ошибка подключения к серверу.\");\n      }\n    };\n    if (userInput) fetchAiResponse();\n  }, [userInput, setAiResponse]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0412\\u0432\\u0435\\u0434\\u0435\\u043D\\u043D\\u044B\\u0439 \\u0447\\u0435\\u043B\\u043E\\u0432\\u0435\\u043A\\u043E\\u043C \\u0442\\u0435\\u043A\\u0441\\u0442:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: userInput || \"Нет текста.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u041E\\u0442\\u0432\\u0435\\u0442 \\u0418\\u0418:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: aiResponse || \"Ждем ответа...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(ThirdPage, \"/pAPLRFbOZno7/g3C7hE/2wt52A=\");\n_c = ThirdPage;\nexport default ThirdPage;\nvar _c;\n$RefreshReg$(_c, \"ThirdPage\");","map":{"version":3,"names":["React","useContext","useEffect","AppContext","jsxDEV","_jsxDEV","ThirdPage","_s","userInput","aiResponse","setAiResponse","fetchAiResponse","response","fetch","method","headers","body","JSON","stringify","input","data","json","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/AI-project-WW2/src/pages/ThirdPage.jsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { AppContext } from \"../Context\";\r\n\r\nconst ThirdPage = () => {\r\n  const { userInput, aiResponse, setAiResponse } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    const fetchAiResponse = async () => {\r\n      try {\r\n        const response = await fetch(\"https://your-backend-api.com/ai-response\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ input: userInput }),\r\n        });\r\n        const data = await response.json();\r\n        setAiResponse(data.response || \"Ошибка от ИИ\");\r\n      } catch (error) {\r\n        setAiResponse(\"Ошибка подключения к серверу.\");\r\n      }\r\n    };\r\n\r\n    if (userInput) fetchAiResponse();\r\n  }, [userInput, setAiResponse]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h2>Введенный человеком текст:</h2>\r\n      <p>{userInput || \"Нет текста.\"}</p>\r\n      <h2>Ответ ИИ:</h2>\r\n      <p>{aiResponse || \"Ждем ответа...\"}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThirdPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,SAASC,UAAU,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,SAAS;IAAEC,UAAU;IAAEC;EAAc,CAAC,GAAGT,UAAU,CAACE,UAAU,CAAC;EAEvED,SAAS,CAAC,MAAM;IACd,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;UACvEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAEX;UAAU,CAAC;QAC3C,CAAC,CAAC;QACF,MAAMY,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCX,aAAa,CAACU,IAAI,CAACR,QAAQ,IAAI,cAAc,CAAC;MAChD,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdZ,aAAa,CAAC,+BAA+B,CAAC;MAChD;IACF,CAAC;IAED,IAAIF,SAAS,EAAEG,eAAe,CAAC,CAAC;EAClC,CAAC,EAAE,CAACH,SAAS,EAAEE,aAAa,CAAC,CAAC;EAE9B,oBACEL,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBnB,OAAA;MAAAmB,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCvB,OAAA;MAAAmB,QAAA,EAAIhB,SAAS,IAAI;IAAa;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCvB,OAAA;MAAAmB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBvB,OAAA;MAAAmB,QAAA,EAAIf,UAAU,IAAI;IAAgB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV,CAAC;AAACrB,EAAA,CA7BID,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AA+Bf,eAAeA,SAAS;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}